# 命名空间的生命周期：

# 命名空间的生命周期取决于对象的作用域，如果对象执行完成，则该命名空间的生命周期就结束。

# 因此，我们无法从外部命名空间访问内部命名空间的对象。

# 实例
# var1 是全局名称
var1 = 5


def some_func():

    # var2 是局部名称
    var2 = 6

    def some_inner_func():

        # var3 是内嵌的局部名称
        var3 = 7


# 全局变量和局部变量
# 定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。

# 局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。

# 在函数内部声明的变量只在函数内部的作用域中有效，调用函数时，这些内部变量会被加入到函数内部的作用域中，并且不会影响到函数外部的同名变量，如下实例：
print("-----------------------")
total = 0  # 这是一个全局变量


# 可写函数说明
def sum(arg1, arg2):
    # 返回2个参数的和."
    total = arg1 + arg2  # total在这里是局部变量.
    print("函数内是局部变量 : ", total)
    return total


# 调用sum函数
sum(10, 20)
print("函数外是全局变量 : ", total)


# global 和 nonlocal关键字
# 当内部作用域想修改外部作用域的变量时，就要用到 global 和 nonlocal 关键字了。
# 以下实例修改全局变量 num：
print("-----------------------")
num = 1


def fun1():
    global num  # 需要使用 global 关键字声明
    print(num)
    num = 123
    print(num)


fun1()
print(num)
