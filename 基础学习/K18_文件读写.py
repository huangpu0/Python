# 读和写文件
# open() 将会返回一个 file 对象，基本语法格式如下:

# open(filename, mode)
# filename：包含了你要访问的文件名称的字符串值。
# mode：决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。

# 模式	描述
# r	以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
# rb	以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。
# r+	打开一个文件用于读写。文件指针将会放在文件的开头。
# rb+	以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。
# w	    打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
# wb	以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
# w+	打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
# wb+	以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
# a	    打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
# ab	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
# a+	打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。
# ab+	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。

# 打开一个文件
print("---------------")

# 写入文件
w_f = open("基础学习/K18_tmp.txt", "w")

# 写入文件
number = w_f.write("Python是一个非常好的语言。\n是的，的确非常好!!\n")
print("写入的字符数:", number)

# 非字符串需进行转换
value = ("www.runoob.com", 14)
s = str(value)
w_f.write(s)

# 关闭打开的文件
w_f.close()

# 读取文件
r_f = open("基础学习/K18_tmp.txt", "r")

# 读取文件
# r_str = r_f.read()
# print(r_str)

# 读取文件中的一行
# line_str = r_f.readline()
# print(line_str)

# 读取文件中的所有行
for line in r_f:
    print(line, end="")

r_f.close()


# f.tell()
# f.tell() 用于返回文件当前的读/写位置（即文件指针的位置）。文件指针表示从文件开头开始的字节数偏移量。f.tell() 返回一个整数，表示文件指针的当前位置。

# f.seek()
# 如果要改变文件指针当前的位置, 可以使用 f.seek(offset, from_what) 函数。
print("\n---------------")
rbadd_f = open("基础学习/K18_tmp.txt", "rb+")
rbadd_f.seek(5)
print(rbadd_f.seek(5))  # 移动到文件的第六个字节
rbadd_f.read(1)
print(rbadd_f.read(1))  # 打印当前文件指针位置
